generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String   @unique
  bio             String?
  email           String   @unique
  friendcode      String   @unique
  image           String?
  hashedPassword  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  latitude        Float?  // lat long of user for google maps
  longitude       Float?
  locality        String?  //city/locality
  mostVisited     String?   // most visited locality
  rated           Rating[]    // list of all ratings
  posts           Post[]     // list of all posts
  friendsIds      String[] @db.ObjectId
  comments        Comment[]   // list of all comments
}

model Post {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  likedIds           String[] @db.ObjectId
  image              String?
  comments           Comment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  postId             String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  rating         Int 
  cusine         String[]
  location       String   // either lat long or google maps link
  likedIds       String[] @db.ObjectId
  userId         String   @db.ObjectId
  locality       String   // city/locality
  image          String     
  ratings        Rating[] 

}


model Rating {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  restaurantId       String @db.ObjectId
  rating             Int
  content            String? 
  user         User     @relation(fields: [userId], references: [id],onDelete: Cascade)     // userid of rating will be equal to the id of the User who rated
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id],onDelete: Cascade) // restaurantid of rating will be the id of the resturant rated

}